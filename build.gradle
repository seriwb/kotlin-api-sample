import org.gradle.util.GFileUtils

buildscript {
    ext {
        kotlinVersion = '1.3.21'
        springBootVersion = '2.0.0.RELEASE'
    }

    repositories {
        mavenCentral()
        maven { url "https://repo.spring.io/snapshot" }
        maven { url "https://repo.spring.io/milestone" }
        maven { url 'https://plugins.gradle.org/m2/' }
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion")
        classpath("org.jetbrains.kotlin:kotlin-allopen:$kotlinVersion")
        classpath('nu.studer:gradle-jooq-plugin:2.0.9')
        classpath("org.jmailen.gradle:kotlinter-gradle:1.22.0")
    }
}

plugins {
    id 'jacoco'
    id 'com.github.kt3k.coveralls' version '2.8.2'
}

apply plugin: 'kotlin'
apply plugin: 'kotlin-spring'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'nu.studer.jooq'
apply plugin: "org.jmailen.kotlinter"

group = 'box.white.seriwb'
version = '1.0-SNAPSHOT'
sourceCompatibility = 1.8

compileKotlin {
    kotlinOptions.jvmTarget = sourceCompatibility
}
compileTestKotlin {
    kotlinOptions.jvmTarget = sourceCompatibility
}

repositories {
    mavenCentral()
    maven { url "https://repo.spring.io/snapshot" }
    maven { url "https://repo.spring.io/milestone" }
    jcenter()
}

dependencies {
    compile('org.springframework.boot:spring-boot-starter-jooq')
    compile('org.springframework.boot:spring-boot-starter-webflux')
    compile("org.jetbrains.kotlin:kotlin-reflect:${kotlinVersion}")
    implementation("org.jetbrains.kotlinx:kotlinx-coroutines-core:1.1.1")
    compile("com.fasterxml.jackson.module:jackson-module-kotlin:2.9.2")
    runtime('org.springframework.boot:spring-boot-devtools')
    runtime('com.h2database:h2:1.4.196')
    jooqRuntime('com.h2database:h2:1.4.196')
    testCompile('org.springframework.boot:spring-boot-starter-test')
    testCompile('io.projectreactor:reactor-test')
    testCompile('org.mockito:mockito-all:2.0.2-beta')
    testCompile('org.powermock:powermock-api-mockito:1.7.3')
}

sourceSets {
    initJooq
}

jooq {
    version = '3.10.1'
    edition = 'OSS'
    tables(sourceSets.initJooq) {
        jdbc {
            driver = 'org.h2.Driver'
            url = 'jdbc:h2:./test;AUTO_SERVER=TRUE'
            user = 'sa'
            password = ''
        }
        generator {
            name = 'org.jooq.util.DefaultGenerator'
            database {
                name = 'org.jooq.util.h2.H2Database'
                inputSchema = ''
                includes = '.*'
                excludes = ''
            }
            target {
                packageName = 'box.white.seriwb.api.jooq'
                //directory = 'src/main/java'
            }
        }
    }
}
generateTablesJooqSchemaSource.onlyIf { name != 'build' }

// cleanタスクで生成されたコードが削除されないようにするため、1つ段階を踏む
task copyJooq(dependsOn: [clean, generateTablesJooqSchemaSource]) {
    doLast {
        File targetDir = new File("src/main/java/box/white/seriwb/api/jooq")
        targetDir.deleteDir()

        File jooqDir = new File("build/generated-src/jooq/tables")
        GFileUtils.copyDirectory(jooqDir, new File("src/main/java"))
    }
}
// コンパイル時、常にJOOQのコードを自動生成する場合は以下を設定する（開発用）
//compileKotlin.dependsOn copyJooq

kotlinter {
    ignoreFailures = true
    indentSize = 4
    continuationIndentSize = 8
    reporters = ['checkstyle', 'plain']
}

jacocoTestReport {
    doFirst {
        classDirectories = fileTree(
                dir: 'build/classes/kotlin',
                excludes: [ '**/jooq/*' ]
        )
    }
    reports {
        xml.enabled true // coveralls plugin depends on xml format report
        html.enabled true
        html.destination(new File("${buildDir}/jacocoHtml"))
    }
}
jacocoTestReport.dependsOn test
